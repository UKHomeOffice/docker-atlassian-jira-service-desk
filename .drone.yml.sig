eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIG15LWJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGRvY2tlci1hdGxhc3NpYW4tamlyYS1zZXJ2aWNlLWRlc2sgLgogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCiAgaW1hZ2VfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCt1cGJvdCIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIGRvY2tlci1hdGxhc3NpYW4tamlyYS1zZXJ2aWNlLWRlc2sgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2RvY2tlci1hdGxhc3NpYW4tamlyYS1zZXJ2aWNlLWRlc2s6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgICAtIGRvY2tlciB0YWcgZG9ja2VyLWF0bGFzc2lhbi1qaXJhLXNlcnZpY2UtZGVzayBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvZG9ja2VyLWF0bGFzc2lhbi1qaXJhLXNlcnZpY2UtZGVzazpsYXRlc3QKICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvZG9ja2VyLWF0bGFzc2lhbi1qaXJhLXNlcnZpY2UtZGVzawogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCiAgbm90aWZ5X3NsYWNrOgogICAgaW1hZ2U6IHBsdWdpbnMvc2xhY2s6MS4wCiAgICBjaGFubmVsOiBkcm9uZQogICAgdXNlcm5hbWU6IGRyb25lCiAgICB0ZW1wbGF0ZTogPgogICAgICBidWlsZCAje3tidWlsZC5OdW1iZXJ9fSBmaW5pc2hlZCB3aXRoIGEge3tidWlsZC5TdGF0dXN9fSBzdGF0dXMuIHt7YnVpbGQuTGlua319IC0ge3tyZXBvLkxpbmt9fQogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IFtwdWxsX3JlcXVlc3QsIHB1c2hdCiAgICAgIHN0YXR1czogW3N1Y2Nlc3MsIGZhaWx1cmVdCgogICMgbm90aWZ5OgogICMgICBpbWFnZTogcGx1Z2lucy9zbGFjawogICMgICB3ZWJob29rOiBodHRwczovL2hvb2tzLnNsYWNrLmNvbS9zZXJ2aWNlcy8ke1NMQUNLX1dFQkhPT0t9CiAgIyAgIGNoYW5uZWw6IGRyb25lCiAgIyAgIHVzZXJuYW1lOiBkcm9uZQogICMgICB3aGVuOgogICMgICAgIHN0YXR1czogWyBzdWNjZXNzLCBmYWlsdXJlIF0KICAjICAgICBldmVudDogWyBwdXNoLCBwdWxsX3JlcXVlc3QgXQoKc2VydmljZXM6CiAgZGluZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMS1kaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBjb21tYW5kOgogICAgICAtICItcyIKICAgICAgLSAib3ZlcmxheSIK.sCo4hFxGJbFIm__YAAk-d1iK8eriAk3JL9ISdVhW9fQ